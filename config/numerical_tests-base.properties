# Properties file to perform numerical tests.

# Set the path to the DLMF dataset, in my case it was lessformulas.txt
dlmf_dataset=/home/andreg-p/data/Howard/together.txt

# Set the path to the file that defines label to DLMF links. In my case the name of the file was BruceLabelLinks.txt
dlmf_labelset=/home/andreg-p/data/Howard/BruceLabelLinks.txt

# Set the path to the results of the symbolic evaluation
# If this variable is set, only the test cases that finishes with "failure"
# will be numerically evaluated (other cases will be skipped).
#symbolic_results_data=/home/andreg-p/Howard/Results/AutoMath/01-AL-symbolic.txt

# You may not need this since you get all information about missing
# macros from the symbolic evaluations. However, if you start numerical evaluations
# independently, it makes sense to specify this file.
#missing_macro_output=/home/andreg-p/Howard/missing-macros-EF-Mat.txt

# Set the path for the output file. This will create (and overwrite existing) file that will contains the overview
# information for numerical tests.
#output=/home/andreg-p/Howard/Results/MapleNumeric/01-AL-numeric2.txt

# Enables or disables the DLMF link for each line in the output file. Use "true" or "false".
show_dlmf_links=true

# Define which lines from the dlmf_dataset you want to use for your numerical tests.
# The first line number is 1 (not 0) and start is included, while the end is excluded.
# For example: subset_tests=5,100 will perform numerical tests for the lines 5, 6, ..., 98, 99.
#subset_tests=1623,1624
subset_tests=1,1

# Define the numerical values you want to test in a list in Maple's 2D input format.
# Note that, if a formula contain multiple variables, such as 'x' and 'y' than the numerical tests
# will perform each combination of variable-value.
# For example, if the formula contains the variables 'x' and 'y' and you set numerical_values=[1,2],
# then the algorithm will test the values: x=1,y=1; x=2,y=1; x=1,y=2; x=2,y=2;
# As an example for 8 values on the unit circle:
# numerical_values=[1, sqrt(2)+sqrt(2)*I, I, sqrt(2)-sqrt(2)*I, -1, -sqrt(2)-sqrt(2)*I, -I, -sqrt(2)+sqrt(2)*I]
#numerical_values=[1, \\sqrt{2}+\\sqrt{2} \\iunit, \\iunit, \\sqrt{2}-\\sqrt{2} \\iunit, -1, -\\sqrt{2}-\\sqrt{2} \\iunit, -\\iunit, -\\sqrt{2}+\\sqrt{2} \\iunit]
numerical_values=[\\exp@{\\cpi\\iunit/6}, \\exp@{2\\cpi\\iunit/3}, \\exp@{-\\cpi\\iunit/3}, \\exp@{-5\\cpi\\iunit/6}, -3/2, 3/2, -1/2, 1/2, -2, 2]

# Define special variables you want to treat differently from others occurring in
# the test expression. Define the variables as a Maple set, i.e., use {...} and
# the Maple notation for variables.
special_variables={n, m, k, \\ell, l, i, j, \\epsilon, \\varepsilon}

# Treating some variables differently includes to define different values for them.
# The notation is the same as for <numerical_values> above.
special_variables_values=[1, 2, 3]

entire_test_set_assumptions=x \\in \\Real || y \\in \\Real || a \\in \\Real || b \\in \\Real || c \\in \\Real || r \\in \\Real || s \\in \\Real || t \\in \\Real || x > 0 || -\\cpi < \\phase@{z} < \\cpi || \\alpha \\in \\Real || \\beta \\in \\Real || \\alpha > 0 || \\beta > 0

# Specify to skip a test, if the line contains more variables than the given number.
skip_if_more_combintations=300

# ---------------------------------------------------------------------------------------------------------------- #
# In the following you have to specify what you want to test.
# The #LHS, #RHS, #RESULT and #THRESHOLD are placeholders that will be replaced at runtime buy the corresponding values.

# How you want to compare the LHS and RHS. Typical use cases are (#LHS)/(#RHS) or (#LHS)-(#RHS).
test_expression=(#LHS)-(#RHS)

# In some cases, one of the sides is 0. To handle issues with "division by zero" correctly, you should provide
# special test expressions for both cases.
test_if_rhs_null=#LHS
test_if_lhs_null=#RHS

# Define the expected outcome for each value. For example, in case of (#LHS)/(#RHS), the expected value is 1 (+/- machine accuracy).
# In case of (#LHS)/(#RHS), you would test for abs(#RESULT-1) < #THRESHOLD
test_expectation=abs(#RESULT) < #THRESHOLD

# Define the threshold for your tests (floating point value)
test_threshold=0.001

# Define the accuracy that Maple should use for evaluations (integer, high number may increase time)
test_precision=10

# timeout simplification in seconds
timeout=20

