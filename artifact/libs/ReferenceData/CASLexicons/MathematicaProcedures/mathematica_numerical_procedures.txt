createListOfTestCases[vars_, vals_] := Tuples[Table[tmp1 -> tmp2, {tmp1, vars}, {tmp2, vals}]]

mapConstraints[vars_, vals_] := Module[
    {tmp},
    tmp = {};
    Do[
        Module[{},
            AppendTo[tmp, {Part[vars, i] -> Part[vals, i]}];
        ], {i, Length[vars]}];
    Return[{Flatten[tmp]}]
]

filterTestCases[ass_, tests_, max_] := Select[tests, ReplaceAll[And @@ ass, #]&, max]

filterAssumptions[ass_, vars_] := Select[ass, SubsetQ[vars, Reduce`FreeVariables[#]]&]

filterGlobalAssumptions[ass_, vars_, constr_] := Select[ass, And[MemberQ[vars, Part[Reduce`FreeVariables[#],1]], Not[MemberQ[Reduce`FreeVariables[constr], Part[Reduce`FreeVariables[#],1]]]]&]

calculateResults[expr_, tests_] :=
    Module[{results},
        results = {};
        If[
            Length[tests] == 0,
            AppendTo[results, N[expr]],
            Do[
                Module[{testRes},
                    testRes = Catch[
                        N[ReplaceAll[expr, Part[tests, i]]]
                    ];
                    AppendTo[results, testRes];
                ],
                {i, Length[tests]}
            ];
        ];
        Return[results]
    ]

numericalAutoTest[expr_, tests_, threshold_] :=
    Module[{results, output},
        results = calculateResults[expr, tests];
        output = {};
        Do[
            Module[{},
                If[
                    i <= Length[tests],
                    AppendTo[output, {Part[results, i], Part[tests, i]}],
                    AppendTo[output, {Part[results, i], "NoValue"}]
                ]
            ], {i, Length[results]}];
        Return[output]
    ]

wasSuccessful[expr_, threshold_] := Module[{},
    Return[
        Or[
            And[BooleanQ[expr], expr],
            And[NumericQ[expr], Abs[expr] < threshold]
        ]
    ]
]

createTestCases[vars_, vals_, constVars_, constVals_, extraVars_, extraVals_] := Module[
    {varsF, constT, extraT, testCases},
    varsF = Complement[vars, constVars, extraVars];
    extraT = createListOfTestCases[Complement[Intersection[extraVars, vars], constVars], extraVals];
    constT = mapConstraints[constVars, constVals];
    varsT = createListOfTestCases[varsF, vals];
    Which[
        And[Length[Flatten[extraT]] == 0, Length[Flatten[constT]] == 0],
            Return[varsT],
        And[Length[Flatten[extraT]] > 0, Length[Flatten[constT]] == 0],
            Return[Flatten[Table[Union[tmp1, tmp2], {tmp1, varsT}, {tmp2, extraT}], 1]],
        And[Length[Flatten[extraT]] == 0, Length[Flatten[constT]] > 0],
            Return[Flatten[Table[Union[tmp1, tmp2], {tmp1, varsT}, {tmp2, constT}], 1]],
        And[Length[Flatten[extraT]] > 0, Length[Flatten[constT]] > 0],
            Return[Flatten[Table[Union[tmp1, tmp2, tmp3], {tmp1, varsT}, {tmp2, constT}, {tmp3, extraT}], 2]]
    ]
]