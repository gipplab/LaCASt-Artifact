#!/usr/bin/env bash

# Setup everything, load config file and jars from libs folder
source ./scripts/parser.sh

eval $(parse_yaml lacast.config.yaml)
eval $(load_jars)

CONFIGFILEBASE="config/numerical_tests-base.properties"
CONFIGFILE="config/numerical_tests.properties"
SETFILES="config/together-lines.txt"

OUTPUTPATH="./dlmf/results-generated"
REFERENCE_BASE_PATH="./dlmf/results-original"

# Manual in case the user does not specify anything
usage() {
    echo "You must specify the CAS you want to translate to.
The following arguments are possible"
    echo ""
    echo "./lacast-eval-symbolic.sh"
    printf "\t--mathematica\tFor translations to Mathematica\n"
    printf "\t-mm\t\tAlternative for --mathematica\n"
    printf "\t--maple\t\tFor translations to Maple\n"
    printf "\t-ma\t\tAlternative for --maple\n"
    printf "\t-i #1 | --in #1\tSets the reference base path to symbolic results (default: ./dlmf/results-original)\n"
    printf "\t-r\t\tReverse mode: instead of testing failed symbolic cases, successful symbolic cases are tested\n\n"
    echo ""
}

REVERSEMODE=0
CAS=
ARG=

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -r)
      EVERSEMODE=1
      shift
      ;;
    -i | --i | --in)
      REFERENCE_BASE_PATH=$2
      shift
      shift
      ;;
    -mm | --mm | --mathematica)
      CAS="Mathematica"
      ARG="--mathematica"

      # In case of Mathematica, LD_LIBRARY_PATH must be set. So be sure the values are available
      if [[ -z "${lacast_cas_Mathematica_native_library_path}" ]]; then
        echo "ERROR: You want to use Mathematica for symbolic evaluation but did not specify a valid path in lacast.config.yaml"
        exit 1;
      elif [[ ! -d "${lacast_cas_Mathematica_native_library_path}" ]]; then
        echo "ERROR: The specified library path in lacast.config.yaml for Mathematica does not exist (${lacast_cas_Mathematica_native_library_path})"
      else
        export LD_LIBRARY_PATH="${lacast_cas_Mathematica_native_library_path}"
      fi
      shift
      ;;
    -ma | --ma | --maple)
      CAS="Maple"
      ARG="--maple"

      # In case of Maple, the LD_LIBRARY_PATH and MAPLE must be set. Make sure both are properly setup via lacast.config.yaml
      if [[ -z "${lacast_cas_Maple_native_library_path}" || -z "${lacast_cas_Maple_install_path}" ]]; then
        echo "ERROR: You want to use Maple for symbolic evaluation but did not specify valid paths in lacast.config.yaml"
        exit 1;
      elif [[ ! -d "${lacast_cas_Maple_native_library_path}" ]]; then
        echo "ERROR: The specified library path of Maple in lacast.config.yaml does not exist (${lacast_cas_Maple_native_library_path})"
        exit 1;
      elif [[ ! -d "${lacast_cas_Maple_install_path}" ]]; then
        echo "ERROR: The specified install path of Maple in lacast.config.yaml does not exist (${lacast_cas_Maple_install_path})"
        exit 1;
      else
        export LD_LIBRARY_PATH="${lacast_cas_Maple_native_library_path}"
        export MAPLE="${lacast_cas_Maple_install_path}"
      fi
      shift
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

# If the CAS was not specified, stop here. The user must decide to use a CAS
if [[ -z "$CAS" ]]; then
  usage
  exit 1
fi

if [[ ! -d "$REFERENCE_BASE_PATH/${CAS}Symbolic" ]]; then
  echo "Your specified reference base path does not exist: ${REFERENCE_BASE_PATH}/${CAS}Symbolic"
  exit 1
fi

if (( $REVERSEMODE == 1 )); then
  ARG="${ARG} -reverse"
fi

OUTFOLDER="${OUTPUTPATH}/${CAS}Numeric"
if (( $REVERSEMODE == 1 )); then
  OUTFOLDER="${OUTFOLDER}SymbolicSuccessful"
fi
mkdir -p $OUTFOLDER

NEWLINE=$'\n'
RESSTR="Results:$NEWLINE";

IFS=': '
while read line; do
  echo "Remove config file."
  rm -f $CONFIGFILE;

  echo "Create new config file."
  read -ra ADDR <<< $line;

  echo "# This file was auto-generated by 'numeric-evaluator.sh'. Update it if you want to use 'lacast-eval-numeric.sh'" >> $CONFIGFILE
  echo "" >> $CONFIGFILE
  cat $CONFIGFILEBASE >> $CONFIGFILE;

  echo "Writing to folder ${OUTFOLDER}"

  echo "" >> $CONFIGFILE
  echo "output=${OUTFOLDER}/${ADDR[0]}-numeric.txt" >> $CONFIGFILE;
  echo "symbolic_results_data=${REFERENCE_BASE_PATH}/${CAS}Symbolic/${ADDR[0]}-symbolic.txt" >> $CONFIGFILE;

  echo "Done creating file for ${ADDR[0]}"
  echo "Start processing..."
  java -Xmx8g -Xss200M -cp "$LACAST_CLASSPATH" gov.nist.drmf.interpreter.evaluation.core.numeric.NumericalEvaluator "${ARG}"
  RESULTCODE=$?;
  echo "Done ${ADDR[0]}"

  RESSTR="${RESSTR}${ADDR[0]}: $RESULTCODE $NEWLINE"
done < $SETFILES

# Print little summary
echo "The following lists the exit codes of the performed symbolic evaluations."
echo "If an exit code was different to 0, something went wrong and the output was not generated for that chapter!"
echo ""
echo "$RESSTR"
exit 0
