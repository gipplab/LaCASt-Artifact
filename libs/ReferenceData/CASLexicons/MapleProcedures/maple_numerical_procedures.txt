with(combinat,cartprod):

createListInList := proc(var::set, values::list)
  local v;
  return [seq(`if`(nops(createListOfValues(v,values))>0, createListOfValues(v,values), NULL), v in var)];
end proc:

createListOfValues := proc(var, values::list)
  local val;
  return [seq(var = val, val in values)];
end proc:

NumericalTester := proc(expr, values::list, threshold::numeric, precision::posint)
  local combi, combo, result, output;
  output := NULL;
  if nops(values) = 1 then
    return innerTesterMethod(expr, op(values), threshold, precision);
  end if;
  combi := cartprod(values);
  while not combi[finished] do
    combo := combi[nextvalue]();
    # strange, the following line destroys the algebraic callback in linux -> comment this line
    #printf("Next test values: %q\n", combo);
    try
      result := evalf[precision](eval(expr, combo));
      if abs(result-1) > threshold then
        output := output,[result, combo];
      end if;
    catch:
	  printf("Error for test case %q; Message: %q", combo, lastexception);
	  return lastexception;
    end try;
  end do;
  printf("Done");
  return [output];
end proc:

innerTesterMethod := proc(expr, values::list, threshold::numeric, precision::posint)
  local result, output, i;
  output := NULL;
  for i from 1 to nops(values) do
    # strange, the following line destroys the algebraic callback in linux -> comment this line
    #printf("Next test values: %q\n", values[i]);
    try
      result := evalf[precision](eval(expr, values[i]));
      if abs(result-1) > threshold then
        output := output,[result, values[i]];
      end if;
    catch:
	  return lastexception;
    end try;
  end do;
  return [output];
end proc:

specialVariables := proc(vars::list, values::list)
  local output, i;
  output := NULL;
  for i from 1 to nops(vars) do
    output := output, [vars[i] = values[i]];
  end do:
  return output;
end proc:

buildTestValues := proc(ass::list, values::list, maxcombis::posint)
  local combi, combo, output, tmpBool, idx;
  output := NULL;
  combi := cartprod(values);
  while not combi[finished] do
    if nops([output]) >= maxcombis then
      break
    end if:
    combo := combi[nextvalue]();
    #printf("LOG: Test combo %q;\n", combo);
    if nops(ass) = 0 then
      output := output, combo;
    else
      tmpBool := true;
      for idx from 1 to nops(ass) do
        if not(is(eval(ass[idx], combo))) then
          tmpBool := tmpBool and false;
        end if:
      end do:
      if tmpBool then
        output := output, combo;
      end if:
    end if:
  end do:
  #printf("LOG: Built set of valid test values %q;\n", output);
  return [output];
end proc:

buildAssumptions := proc(ass::list)
  local assum, i;
  if nops(ass) = 0 then
    return [];
  end if:
  assum := ass[1];
  for i from 2 to nops(ass) do
    assum := assum and ass[i];
  end do:
  #printf("LOG: build assumptions to %q;\n", assum);
  return assum;
end proc:

SpecialNumericalTesterTimeLimit := proc(timeout, expr, values::list, precision::posint)
  if expr = "TIMED-OUT" then
    return expr;
  end if;
  try
    if timeout > 0 then
      return timelimit(timeout, SpecialNumericalTester(expr, values, precision));
    else
      return SpecialNumericalTester(expr, values, precision);
    end if;
  catch "time expired":
    "TIMED-OUT";
  end try:
end proc:

SpecialNumericalTester := proc(expr, values::list, precision::posint)
  local result, output, i;
  output := NULL;
  if type(expr, numeric) then
    return [[expr, "allValues"]];
  end if;
  if nops(values) = 0 then
    return NULL;
  end if;
  for i from 1 to nops(values) do
    try
      result := evalf[precision](eval(expr, values[i]));
      output := output,[result, values[i]];
    catch:
      #printf("Error for test case %q; Message: %q\n", combo, lastexception);
      output := output,[StringTools:-FormatMessage( lastexception[2..-1] ), values[i]];
    end try:
  end do:
  return [output];
end proc:

myIndets := proc(input)
  local vars, set, element;
  vars := indets(input,name);
  for element in vars do
    if evalb(substring(convert(element,string), 1..1) = '_') then
      set := set, element;
    end if:
  end do:
  return vars minus ({set} union {constants});
end proc: